What is React?
    - JavaScript library used to create websites
    - Allows us to easily create Single Page Apps - SPA

*** npx create-react-app <project-name> => this will create the react app for us with all the required files. 

Brief details on the files that are there on the react app:-
1. node_modules - all the project dependencies are here
2. public - all content that are public to the browser will be here
3. src - almost all codes, ie react component comes here
4. package-json : 
        - dependencies: lists all dependencies that are needed for the application
        - scripts: preview application in browser, local server


******************* REACT COMPONENTS *************************
 
1. the function App() can be an arrow function but the function name should be in Upper Case. The function returns
    whatever that is required to be put on that component
2. JSX - Syntax similar to HTML. Allows us to easily create HTML style template and in the backside a compiler called Babel
    converts all this JSX template into HTML and renders the HTML to DOM
    In JSX we can't use class because class is a reserved keyword in JavaScript so we use className and when it is converted to HTML it becomes class
3. In the bottom of the react component(ie App here) we use export to export it to other files

{/* <h1>{title}</h1> */}
        {/* <p>Liked {likes} times</p>
        <p>{10}</p>
        <p>{"hello, all"}</p>
        <p>{[1, 2, 3, 4, 5]}</p>
        <p>{Math.round(Math.random() * 10)}</p>

        <a href={link}>Google Site</a> */}


****************** DYNAMIC VALUES IN TEMPLATES **********************

1. any valid javascript commands can be written in the function before the return statement
2. To include any javascript value inside JSX enclose it between curly braces {JavaScript ELement}
3. Variable of any type be it integer, array, decimal etc will be converted to string in browser but object and boolean won't
    be converted and an error would arise
4. Anything that comes inside {} inside the JSX will be treated as a JavaScript block


****************** MULTIPLE COMPONENTS ******************************

1. App component will be the first one on the browser followed by the other components - Root component
2. sfc - stateless functional component


****************** ADDING STYLES ************************************

1. inline styling in JSX -> style={{}}
    - the first {} tells that it is dynmaic value
    - second {} is for denoting tha it is an object
    - the property in the second {} cannot be things like border-radius, background-color it has to be backgroundColor, borderRadius 
        because it is a Javascript code

***************** CLICK EVENT & FUNCTIONS ***************************
 
1. <button onClick = {}> : here we give the function reference inside the {} and not invoke the function (ie functionName())
    - when we want to pass in a parameter we can't give functionName(parameter) cause this is again invoking the function directly
        instead we have to wrap it in an anonymous function
    Ex: <button onClick={() => clickMeAgain("Benson")}>Click Again</button>

**************** USING STATE ****************************************

1. State - Data being used in that component at that point of time
2. When we give value to a variable and try to change it from a function we won't be able to see the change on the 
    webpage but it is actually being changed on the console because the variable is not reactive because there is no re-rendering to the
    page when the value of the variable is changed
    *** to do the above in react we use hook(useState)
    1. import {useState} from react
    2. change the variable you wanted to be reactive in useState format
        ie, const [name,setName] = useState(value);
            a. name - this will be variable that will hold the value
            b. setName - it is the function which will be used to change the value of the variable
            So whenever we use the fucntion to change the value it triggers the react to re-render the page and the change will be applied

    Ex: const [name, setName] = useState("Benson");
        const clickMe = () => {
            setName("Mr. Benson ");
        };

**************** OUTPUTTING LISTS ***************************

1. To iterate over a list of arrays of objects we use map in Javascript
    - we must include the key in each element of the list or browser may not be able to distinguish between each element of the list
    - key should be the unique id so that it can be distinguished


****************** PROPS & REUSABLE COMPONENTS *********************

1. When we want to reuse a particular block of code or logic in multiple components or pages
    - benefit of doing this is we can pass multiple data to the component so we can minimise the repitition of the code
    - these data can be passed in the form of props which makes the component more reusable

2. <BlogList blogs={blogs} /> Here we pass blogs to the Bloglist which will be taken as props argument in the BlogList function
    props is an object and to access blogs we have to use props.blogs
    blogs = {blogs} : Here the first blogs is the property name and the {blogs} is the value we are passing to BlogList
    - destructuring the props using {blog,title} rather than using separately


****************** FUNCTION AS PROPS ******************************

1. When we give each blog a delete button but when we want to delete a particular blog we need to create the function In
    the home.js file and from there pass this function as props because the data is not present in this component


****************** useEffect HOOK *********************************

-> useEffect -  runs code on every render ie any time data renders or changes the function inside useEffect triggers
-> Dependencies of useEffect
    - when we don't want the useEffect to run for every render we can use useEffect dependency ie by giving a second parameter
    Ex: useEffect(function,[]) - when we use and empty block the useEffect will be triggered only for the first time after initialization
    useEffect(function,[useStateVariable]) -  when we have multiple useState variables and we want to use useEffect on some of them we assign those inside the square braces


******************* USING JSON SERVER *****************************

    We know that when we use useEffect when component is rendered initially which is where we can fetch some data, so instead of using
    data from database we will use from json server where we will use a fake rest API
    
    npx json-server --watch data/db.json --port 8000 

    Type the above line in a separate terminal and this will enable to system to watch ove the particular file mentioned in the mentioned port
    We can see the end resource after the above command is executed where we can acces the data of json file

    /blogs          GET         Fetch all blogs
    /blogs/{id}     GET         Fetch a single blog
    /blogs          POST        Add a new blog
    /blogs/{id}     delete      Delete a blog

    to collect the data from the json file we will use fetch and it is an async command

    A problem that could arise is as we set the initial value of blogs to be null and when we are rendering data from json file to the browser there 
    is a small delay from null to the value of json file and this could arise an error
    
    To avoid this we give logical and (&&) which makes sure that the data is loaded and only then is rendered
    Ex: {blogs && (<BlogList blogs={blogs} title="All Blogs!" handleDelete={handleDelete}/> )}
    Here && checks if blogs is not null and if it not then only goes to the second part


*************************** CATCHING ERRORS ***************************

    When there is some network issue or when we can't even fetch the content then we will give a catch block
    with the err argument which will tell the detail of the error - connection error

    When request is denied or end point doesn't exist ie when response is made by the server and when there is no data
    in the response

*************************** CREATING CUSTOM HOOK **********************

    custom hooks function name has to start with "use" or it doesn't work

*************************** REACT ROUTER ******************************

    Non-React websites:
    When we want to navigate between different pages we send a request to the server which then sends the html file as a response and that
    will be displayed on browser

    React websites:
    They start the same way ie when we want to navigate we send a request to the server and the server send back the html file along with a bundled js file
    The html file will be initially empty and the js file will put value into the html file dynamically
    After this when we click on any component on the page the react file will act as the router and it does not go to the server

    we have to install react-router separately as it is not a part of the core package
    ** npm install react-router-dom@5 "@5 is the version"

    To have the entire App component access to the router we surround the app component inside <Router></Router>

    <Switch>
        <Route path="path to the content">
            content to be shown
        </Route>
    </Switch>

    *** ROUTE PARAMETERS
    Switch - It is used to wrap the route components and it makes sure that only one route component is shown in browser
    Route components have a top-to-bottom approach
        Ex: <Route path="/">
            <Route path="/create">
            Here both will point to "/" because react follows a concept of "includes" and it sees the "/" matching in both path and delivers
            the first route. To avoid this we use the parameter exact which means the path has to be exactly same
    If switch component is not there then all the pages will be rendered

    *** ROUTE LINKS
    Even though we are using the route components to navigate between different pages we are still sending request to
    server 
    We want the react route to grab request and do the required content changes and for this we will be using a link tag rather than anchor tag
    import {Link} from 'react-router-dom';

    When we click between the navigation suddenly back-to-back an error will arise telling "Can't perform a React state update on an unmounted
    component" this is because we have the custom fetch hook which is still running in the background
    When we try to quickly navigate between multiple react components and when we use some hook which has to load the data and when we try to go to the next component
    without waiting for this to load an error will arise. So we have to do something to prevent the fetch to load when we move on to the next ccmponent or page

    **We can solve this by using a cleanup in the custom hook with  abort controller
    Then we have to assosciate the abort controller to the fetch/custom hook
    Ex: const abortCont = new AbortController();
        fetch(url,{signal:abortCont.signal})

    *** Route Parameters

    /blogs/123
    /blogs/456
    /blogs/789

    these are the route parameters coz we need to access each blog based on id
    so create a BlogDetails component
    <Route path="/blogs/:id"> -> We can't hardcode the id here so to write it dynamically we use ":" followed by the variable name

    const {id} = useParams() -> this will help in fetching the parameter from the path written
    Ex: http://localhost:3000/blogs/3 here id will store the value 3
    

***************************** CONTROLLED INPUTS ************************

    We will use useState so that whenever there is a change in the input field we will keep using setMethod()
    Using useState helps to keep a track of the value
    
    onChange={(e) => setTitle(e.target.value)}
        - onChange will trigger every time when there is a change made to the input field
        - e is the event object and every time there is a change we modify the input field by using setTitle
        - e.target.value => this gives the value that is being written on the target input field

    we attach onSubmit parameter to the form and when the form is submitted the onSubmit fires a function and inside that function
    we will attach the necessary things
    e.preventDefault() => this prevents from resetting the input fields after a submit is made

    in a form when a button is fired it is attached to the form itself and the event can be recieved from the form and we needn't do a 
    separate onClick on the button

    ** Using Fetch API
    fetch("http://localhost:8000/blogs/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(blog),
    }).then(() => {
      console.log("new blog added");
      setIsPending(false);
    });
        - first parameter is the end point to which we want to connection
        - second is an object that provides detail about the connection
            - method: the action we are doing ie GET, POST etc
            - headers: detail of the data that is going to be setName
            - body: the data we have to send since we are sending the data in json format we have to use JSON.stringify to convert the blogs
                    object to json format
    

********************** PROGRAMMED REDIRECTS **************************

    A hook that will be used for this is useHistory

    const history = useHistory() => this way we are making the useHistory object

    history.go(-1) => go back in history by 1 and to go in future you have to give positive values in go()

    history.push("path") => goes to the path mentioned after a certain condition has taken place

    When we type a wrong path or that something that doesn't exist we have to show a 404 page or a page telling the path doesn't exist
    for this we have to give path="*" in the routes in App.js where if the given path doesn't match any of the above routes
    the the page under this route ie <Route path ="*"> <NotFound /> </Route> here if the path mentioned is not valid then the NotFound page will
    be displayed

    